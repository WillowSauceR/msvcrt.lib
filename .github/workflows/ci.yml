name: release

on:
  workflow_dispatch:

jobs:
  build:
    name: build-windows
    runs-on: windows-latest
    steps:
    
    - name: Set up VS Dev CMD
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: Generate Win32
      run: |
        cd ${{ github.workspace }}
        mkdir Win32
        dumpbin.exe /EXPORTS C:\\Windows\\SysWOW64\\msvcrt.dll > Win32/msvcrt.exports
        echo EXPORTS > ./Win32/msvcrt.def
        C:\Program` Files\Git\usr\bin\sed -r "s/.*?(:?[A-F0-9]+ ){2}/\t/;tx;d;:x" ./Win32/msvcrt.exports >> ./Win32/msvcrt.def
        lib.exe /MACHINE:X86 /def:Win32/msvcrt.def /out:Win32/msvcrt.lib
      
    - name: Generate x64
      run: |
        cd ${{ github.workspace }}
        mkdir x64
        dumpbin.exe /EXPORTS C:\\Windows\\System32\\msvcrt.dll > x64/msvcrt.exports
        echo EXPORTS > ./x64/msvcrt.def
        C:\Program` Files\Git\usr\bin\sed -r "s/.*?(:?[A-F0-9]+ ){2}/\t/;tx;d;:x" ./x64/msvcrt.exports >> ./x64/msvcrt.def
        lib.exe /MACHINE:X64 /def:x64/msvcrt.def /out:x64/msvcrt.lib
      
    - name: Generate ARM64
      run: |
        cd ${{ github.workspace }}
        mkdir ARM64
        cp x64/msvcrt.def ARM64/msvcrt.def
        echo _fpieee_flt >> ARM64/msvcrt.def
        echo _memcpy_strict_align >> ARM64/msvcrt.def
        echo fabsf >> ARM64/msvcrt.def
        lib.exe /MACHINE:ARM64 /def:ARM64/msvcrt.def /out:ARM64/msvcrt.lib
        
        
    - name: Figure out version
      id: getver
      run: |
        $Version = (Get-ChildItem C:\Windows\system32\msvcrt.dll | % VersionInfo).ProductVersion;
        Echo ("::set-output name=version::" + $Version);
        Echo $Version > version.txt
        Echo "https://github.com/namazso/msvcrt.lib" > readme.txt
      
    - name: Pack artifacts
      run: |
        7z a libs.7z .\*\*.lib readme.txt version.txt
        
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.getver.outputs.version }}
        release_name: ${{ steps.getver.outputs.version }}
        draft: false

    - name: Upload libs
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: .\libs.7z
        asset_name: libs.7z
        asset_content_type: application/octet-stream
